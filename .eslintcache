[{"C:\\dev\\movie-app\\src\\index.js":"1","C:\\dev\\movie-app\\src\\App.js":"2","C:\\dev\\movie-app\\src\\Movie.js":"3"},{"size":197,"mtime":1607926738457,"results":"4","hashOfConfig":"5"},{"size":862,"mtime":1607931760691,"results":"6","hashOfConfig":"5"},{"size":776,"mtime":1607936219110,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"40qncs",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\dev\\movie-app\\src\\index.js",[],["16","17"],"C:\\dev\\movie-app\\src\\App.js",["18"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Movie from './Movie'\n\nclass App extends React.Component{\n  state = {\n    isLoading: true,\n    movie: []\n  };\n  getMovies = async() => {\n      const {data : {data: {movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n      this.setState({movies, isLoading:false})\n  }\n  componentDidMount(){\n      this.getMovies();\n  }\n  render(){\n    const {isLoading, movies} = this.state;\n    return (\n      <div>\n        {isLoading ? 'Loading' :\n          movies.map(movie => (\n          <Movie key ={movie.id}\n          id={movie.id}\n          year={movie.year}\n          title={movie.title}\n          summary={movie.summary}\n          poster={movie.medium_cover_image}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","C:\\dev\\movie-app\\src\\Movie.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":2,"column":8,"nodeType":"25","messageId":"26","endLine":2,"endColumn":17},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]